{"timestamp": "2025-08-12T18:35:48+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T18:35:49+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Binance API Error: 401 - Invalid API-key, IP, or permissions for action", "details": {"status_code": 401, "message": "Invalid API-key, IP, or permissions for action"}, "error_trace": null}
{"timestamp": "2025-08-12T18:38:03+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T18:38:04+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Binance API Error: 401 - Invalid API-key, IP, or permissions for action", "details": {"status_code": 401, "message": "Invalid API-key, IP, or permissions for action"}, "error_trace": null}
{"timestamp": "2025-08-12T18:39:59+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T18:40:00+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68000.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T18:40:00+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T18:40:49+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T18:40:49+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Starting TWAP for BTCUSDT. Placing 30 orders of 0.0033333333333333335 every 60 seconds.", "details": {"total_qty": 0.1, "duration": 30, "interval": 60}, "error_trace": null}
{"timestamp": "2025-08-12T18:40:50+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity step for BTCUSDT. Step size is 0.001", "details": {"quantity": 0.0033333333333333335, "stepSize": 0.001}, "error_trace": null}
{"timestamp": "2025-08-12T18:40:50+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "TWAP sub-order validation failed. Aborting.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T18:43:21+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T18:43:21+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Starting TWAP for BTCUSDT. Placing 30 orders of 0.0033333333333333335 every 60 seconds.", "details": {"total_qty": 0.1, "duration": 30, "interval": 60}, "error_trace": null}
{"timestamp": "2025-08-12T18:43:22+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity step for BTCUSDT. Step size is 0.001", "details": {"quantity": 0.0033333333333333335, "stepSize": 0.001}, "error_trace": null}
{"timestamp": "2025-08-12T18:43:22+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "TWAP sub-order validation failed. Aborting.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T18:44:01+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T18:44:01+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Starting TWAP for BTCUSDT. Placing 30 orders of 0.0033333333333333335 every 60 seconds.", "details": {"total_qty": 0.1, "duration": 30, "interval": 60}, "error_trace": null}
{"timestamp": "2025-08-12T18:44:02+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity step for BTCUSDT. Step size is 0.001", "details": {"quantity": 0.0033333333333333335, "stepSize": 0.001}, "error_trace": null}
{"timestamp": "2025-08-12T18:44:02+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "TWAP sub-order validation failed. Aborting.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T18:44:07+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T18:44:08+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Binance API Error: 401 - Invalid API-key, IP, or permissions for action", "details": {"status_code": 401, "message": "Invalid API-key, IP, or permissions for action"}, "error_trace": null}
{"timestamp": "2025-08-12T19:50:35+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T19:50:35+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T19:52:40+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T19:52:40+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T19:52:40+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T19:52:40+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T19:52:52+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error generating rationale: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T19:52:52+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error generating rationale: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}", "details": null, "error_trace": "Traceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\Desktop\\Trading_Bot\\app.py\", line 149, in generate_rationale\n    response = openai.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n    ...<3 lines>...\n        ]\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 287, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1087, in create\n    return self._post(\n           ~~~~~~~~~~^\n        \"/chat/completions\",\n        ^^^^^^^^^^^^^^^^^^^^\n    ...<43 lines>...\n        stream_cls=Stream[ChatCompletionChunk],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1249, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1037, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}"}
{"timestamp": "2025-08-12T19:59:34+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T19:59:34+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:00:10+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:00:10+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:00:41+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.15, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:00:41+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.15, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:00:41+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:00:41+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:01:35+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 69367.14, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:01:35+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 69367.14, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:01:35+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:01:35+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:01:40+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 69367.14, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:01:40+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 69367.14, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:01:40+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:01:40+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:04:24+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:04:24+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:07:47+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity 0.001 for BNBUSDT. Min: 0.01, Max: 10000.0", "details": {"quantity": 0.001, "min": 0.01, "max": 10000.0}, "error_trace": null}
{"timestamp": "2025-08-12T20:07:47+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity 0.001 for BNBUSDT. Min: 0.01, Max: 10000.0", "details": {"quantity": 0.001, "min": 0.01, "max": 10000.0}, "error_trace": null}
{"timestamp": "2025-08-12T20:07:47+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:07:47+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:08:47+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:08:47+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:09:02+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:09:02+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:09:02+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:09:02+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:10:55+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:10:55+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:11:05+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:11:05+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:11:05+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:11:05+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:11:22+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:11:22+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:11:22+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:11:22+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:13:55+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for LTCUSDT. Tick size is 0.1", "details": {"price": 122.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:13:55+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for LTCUSDT. Tick size is 0.1", "details": {"price": 122.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T20:13:55+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:13:55+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:14:34+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price 68500.0 for ZECUSDT. Min: 1.46, Max: 2445.24", "details": {"price": 68500.0, "min": 1.46, "max": 2445.24}, "error_trace": null}
{"timestamp": "2025-08-12T20:14:34+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price 68500.0 for ZECUSDT. Min: 1.46, Max: 2445.24", "details": {"price": 68500.0, "min": 1.46, "max": 2445.24}, "error_trace": null}
{"timestamp": "2025-08-12T20:14:34+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:14:34+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:14:49+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for ZECUSDT. Tick size is 0.01", "details": {"price": 38.0, "tickSize": 0.01}, "error_trace": null}
{"timestamp": "2025-08-12T20:14:49+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for ZECUSDT. Tick size is 0.01", "details": {"price": 38.0, "tickSize": 0.01}, "error_trace": null}
{"timestamp": "2025-08-12T20:14:49+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:14:49+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:15:07+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity step for ZECUSDT. Step size is 0.001", "details": {"quantity": 0.1, "stepSize": 0.001}, "error_trace": null}
{"timestamp": "2025-08-12T20:15:07+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity step for ZECUSDT. Step size is 0.001", "details": {"quantity": 0.1, "stepSize": 0.001}, "error_trace": null}
{"timestamp": "2025-08-12T20:15:07+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:15:07+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:15:16+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity step for ZECUSDT. Step size is 0.001", "details": {"quantity": 0.1, "stepSize": 0.001}, "error_trace": null}
{"timestamp": "2025-08-12T20:15:16+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid quantity step for ZECUSDT. Step size is 0.001", "details": {"quantity": 0.1, "stepSize": 0.001}, "error_trace": null}
{"timestamp": "2025-08-12T20:15:16+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:15:16+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:46:58+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error fetching live price for ZECUSDT: HTTPSConnectionPool(host='testnet.binancefuture.com', port=443): Read timed out. (read timeout=10)", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:46:58+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error fetching live price for ZECUSDT: HTTPSConnectionPool(host='testnet.binancefuture.com', port=443): Read timed out. (read timeout=10)", "details": null, "error_trace": "Traceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connection.py\", line 516, in getresponse\n    httplib_response = super().getresponse()\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\http\\client.py\", line 1430, in getresponse\n    response.begin()\n    ~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\http\\client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\http\\client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\socket.py\", line 719, in readinto\n    return self._sock.recv_into(b)\n           ~~~~~~~~~~~~~~~~~~~~^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\ssl.py\", line 1304, in recv_into\n    return self.read(nbytes, buffer)\n           ~~~~~~~~~^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\ssl.py\", line 1138, in read\n    return self._sslobj.read(len, buffer)\n           ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\nTimeoutError: The read operation timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\adapters.py\", line 667, in send\n    resp = conn.urlopen(\n        method=request.method,\n    ...<9 lines>...\n        chunked=chunked,\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n        method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\util\\retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\util\\util.py\", line 39, in reraise\n    raise value\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n        conn,\n    ...<10 lines>...\n        **response_kw,\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\n        self, url, f\"Read timed out. (read timeout={timeout_value})\"\n    ) from err\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='testnet.binancefuture.com', port=443): Read timed out. (read timeout=10)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\Desktop\\Trading_Bot\\app.py\", line 109, in get_live_price\n    ticker = binance_client.get_client().futures_symbol_ticker(symbol=symbol)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\binance\\client.py\", line 6300, in futures_symbol_ticker\n    return self._request_futures_api('get', 'ticker/price', data=params)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\binance\\client.py\", line 383, in _request_futures_api\n    return self._request(method, uri, signed, True, **kwargs)\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\binance\\client.py\", line 358, in _request\n    self.response = getattr(self.session, method)(uri, **kwargs)\n                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\sessions.py\", line 602, in get\n    return self.request(\"GET\", url, **kwargs)\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host='testnet.binancefuture.com', port=443): Read timed out. (read timeout=10)"}
{"timestamp": "2025-08-12T20:46:59+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error fetching live price for LTCUSDT: HTTPSConnectionPool(host='testnet.binancefuture.com', port=443): Read timed out. (read timeout=10)", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:46:59+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error fetching live price for LTCUSDT: HTTPSConnectionPool(host='testnet.binancefuture.com', port=443): Read timed out. (read timeout=10)", "details": null, "error_trace": "Traceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connection.py\", line 516, in getresponse\n    httplib_response = super().getresponse()\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\http\\client.py\", line 1430, in getresponse\n    response.begin()\n    ~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\http\\client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\http\\client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\socket.py\", line 719, in readinto\n    return self._sock.recv_into(b)\n           ~~~~~~~~~~~~~~~~~~~~^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\ssl.py\", line 1304, in recv_into\n    return self.read(nbytes, buffer)\n           ~~~~~~~~~^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\ssl.py\", line 1138, in read\n    return self._sslobj.read(len, buffer)\n           ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\nTimeoutError: The read operation timed out\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\adapters.py\", line 667, in send\n    resp = conn.urlopen(\n        method=request.method,\n    ...<9 lines>...\n        chunked=chunked,\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n        method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\util\\retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\util\\util.py\", line 39, in reraise\n    raise value\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n        conn,\n    ...<10 lines>...\n        **response_kw,\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\n        self, url, f\"Read timed out. (read timeout={timeout_value})\"\n    ) from err\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='testnet.binancefuture.com', port=443): Read timed out. (read timeout=10)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\Desktop\\Trading_Bot\\app.py\", line 109, in get_live_price\n    ticker = binance_client.get_client().futures_symbol_ticker(symbol=symbol)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\binance\\client.py\", line 6300, in futures_symbol_ticker\n    return self._request_futures_api('get', 'ticker/price', data=params)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\binance\\client.py\", line 383, in _request_futures_api\n    return self._request(method, uri, signed, True, **kwargs)\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\binance\\client.py\", line 358, in _request\n    self.response = getattr(self.session, method)(uri, **kwargs)\n                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\sessions.py\", line 602, in get\n    return self.request(\"GET\", url, **kwargs)\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\requests\\adapters.py\", line 713, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host='testnet.binancefuture.com', port=443): Read timed out. (read timeout=10)"}
{"timestamp": "2025-08-12T20:47:01+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error generating rationale: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:47:01+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error generating rationale: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}", "details": null, "error_trace": "Traceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\Desktop\\Trading_Bot\\app.py\", line 176, in generate_rationale\n    response = openai.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n    ...<3 lines>...\n        ]\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 287, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1087, in create\n    return self._post(\n           ~~~~~~~~~~^\n        \"/chat/completions\",\n        ^^^^^^^^^^^^^^^^^^^^\n    ...<43 lines>...\n        stream_cls=Stream[ChatCompletionChunk],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1249, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1037, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}"}
{"timestamp": "2025-08-12T20:47:48+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:47:48+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:48:05+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:48:05+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:48:14+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:48:14+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:48:26+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:48:26+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:50:17+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:50:17+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:50:27+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:50:27+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T20:50:44+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error generating rationale: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T20:50:44+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error generating rationale: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}", "details": null, "error_trace": "Traceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\Desktop\\Trading_Bot\\app.py\", line 176, in generate_rationale\n    response = openai.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n    ...<3 lines>...\n        ]\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 287, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1087, in create\n    return self._post(\n           ~~~~~~~~~~^\n        \"/chat/completions\",\n        ^^^^^^^^^^^^^^^^^^^^\n    ...<43 lines>...\n        stream_cls=Stream[ChatCompletionChunk],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1249, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1037, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}"}
{"timestamp": "2025-08-12T21:06:45+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T21:06:45+0530", "level": "INFO", "module": "binance_bot_logger", "event": "Using Binance Futures TESTNET.", "details": "Testnet mode enabled.", "error_trace": null}
{"timestamp": "2025-08-12T21:06:56+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T21:06:56+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Invalid price tick size for BTCUSDT. Tick size is 0.1", "details": {"price": 68500.0, "tickSize": 0.1}, "error_trace": null}
{"timestamp": "2025-08-12T21:06:56+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T21:06:56+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Input validation failed, aborting order placement.", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T21:07:03+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error generating rationale: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}", "details": null, "error_trace": null}
{"timestamp": "2025-08-12T21:07:03+0530", "level": "ERROR", "module": "binance_bot_logger", "event": "Error generating rationale: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}", "details": null, "error_trace": "Traceback (most recent call last):\n  File \"C:\\Users\\Lenovo\\Desktop\\Trading_Bot\\app.py\", line 176, in generate_rationale\n    response = openai.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n    ...<3 lines>...\n        ]\n    )\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 287, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1087, in create\n    return self._post(\n           ~~~~~~~~~~^\n        \"/chat/completions\",\n        ^^^^^^^^^^^^^^^^^^^^\n    ...<43 lines>...\n        stream_cls=Stream[ChatCompletionChunk],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1249, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lenovo\\miniconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1037, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-***. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}"}
